{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"devrel/devrel-driven-development/","title":"DevRel Driven Development","text":"<p>DevRel Driven Development is driving software development from developer advocacy activities like creating documentation, writing blog posts, and producing videos. Developers advocates frequently identify public interface warts when creating content. They can collaborate closely with devs build more intuitive APIs and give end users a better development experience.</p> <p>When done right, DevRel Driven Development creates a symbiotic collaboration between core developers, dev advocates and end users. This virtuous cycle motivates developers and delights end users. Developers love exposing elegant APIs that are quickly adopted by users. A good dev advocate will help the devs expose the right interface.</p> <p>This post explains how to perform DevRel Driven Development and provides real-world examples, so you can see the process in action.</p>"},{"location":"devrel/devrel-driven-development/#create-and-improve-documentation","title":"Create and improve documentation","text":"<p>When a developer advocate starts working on a project, they should go through all the existing docs, run the examples locally, and see if there are any small improvements that'll help onboard new users.</p> <p>It's good to inject positivity and tackle low hanging fruit when you're first starting to contribute to an open source project. You want to build goodwill with the developers before suggesting large changes.</p> <p>Suppose you read through the docs and notice some spelling and grammar issues. You can submit a pull request and add a description like this:</p> <p>This pull request fixes some minor typos in the docs. I was able to learn a lot about this project by going through the docs and running the examples locally. Thanks for making it easy for me to get started with this library!</p> <p>If the project doesn't have any documentation, then you can open an issue like this:</p> <p>Can I make a pull request to add some basic usage instructions to the README? I'd like to make it easy for new users to get up-and-running with this library. Let me know if this sounds like a good idea.</p> <p>Lots of developers prefer focusing their energy on software engineering and don't enjoy evangelizing their work. They appreciate developer advocacy activities that'll help them get users.</p> <p>You can gradually step up the scope of proposed changes after you've built a relationship with the developers and have convinced them that they'll benefit from your involvement in the project.</p> <p>You're likely to add new sections to the docs and reorganize content after a few iterations. You'll eventually find some gaps and unintuitive APIs and that's when you can start suggesting new features.</p>"},{"location":"devrel/devrel-driven-development/#fixing-bugs","title":"Fixing bugs","text":"<p>When you're going through the docs and running the code locally, you're bound to spot certain sections that are missing, unintuitive, or overly complex.</p> <p>Let's look at a real-world example to see how DevRel Driven Development can quickly squash bugs and add features.</p> <p>I was reading through the delta-rs docs and created a Jupyter Notebook, so other developers could easily follow along.</p> <p>I tried to create a Delta Lake with delta-rs, but faced an unexpected error when reading the Delta Lake. I filed a bug report and a delta-rs dev fixed the issue within a day. Turns out the test suite only checked absolute paths and the code wasn't working for relative paths. I switched the notebook to absolute paths and continued creating the demo notebook.</p> <p>The demo notebook made me realize that some features weren't implemented yet.</p>"},{"location":"devrel/devrel-driven-development/#filling-gaps","title":"Filling gaps","text":"<p>Delta Lake allows for schema enforcement, which prevents files with different schema from being added to the Delta Lake.</p> <p>I noticed schema enforcement wasn't working in the demo notebook and pinged the delta-rs devs in Slack. They noticed this was an oversight, created an issue, and quickly fixed the bug.</p> <p>Devs are highly motivated to fix oversights, especially if they feel ownership of the codebase.</p>"},{"location":"devrel/devrel-driven-development/#suggesting-interfaces","title":"Suggesting interfaces","text":"<p>Developer advocates should also provide developers with suggestions on the public interfaces that should be exposed.</p> <p>I tried to vacuum a Delta Lake with delta-rs and found that there isn't a way to bypass the retention period check. You can overcome this restriction with normal Delta Lake by setting <code>config(\"spark.databricks.delta.retentionDurationCheck.enabled\", \"false\")</code> when creating the SparkSession. One of the delta-rs developers suggested adding an <code>enforce_retention_duration=True</code> parameter in <code>DeltaTable.vacuum()</code>. I countered in an issue by suggesting to add this parameter as <code>retention_duration_check_enabled=True</code>, so we're consistent with the Delta Lake wording.</p> <p>A health back-and-forth on the optimal interface is likely to result in an API that's intuitive for users.</p> <p>Developer advocates can take their suggesting to the next level by actually submitting pull requests to implement their suggestions.</p>"},{"location":"devrel/devrel-driven-development/#devrel-pull-requests","title":"DevRel pull requests","text":"<p>I am writing Dask: The Definitive Guide and have been creating a lot of small Dask DataFrames in the book examples.</p> <p>I've been creating Dask DataFrames as follows:</p> <pre><code>import pandas as pd\n\npandas_df = pd.DataFrame(\n    {\"num1\": [1, 2, 3, 4], \"num2\": [7, 8, 9, 10]},\n)\ndf = dd.from_pandas(pandas_df, npartitions=2)\n</code></pre> <p>This syntax confuses users. They're surprised they need to <code>import pandas</code> to create a small Dask DataFrame.</p> <p>I suggested adding the following interface to avoid importing pandas:</p> <pre><code>import dask.dataframe as dd\n\nddf = dd.DataFrame(\n    {\"num1\": [1, 2, 3, 4], \"num2\": [7, 8, 9, 10]},\n    npartitions=2,\n)\n</code></pre> <p>The Dask DataFrame public interface is designed to mimic the pandas API and a core Dask developer suggested a <code>from_dict</code> class method, just like pandas:</p> <pre><code>dd.DataFrame.from_dict(\n    {\"num1\": [1, 2, 3, 4], \"num2\": [7, 8, 9, 10]}, npartitions=2\n)\n</code></pre> <p>I created a pull request to add this feature. I haven't contributed to Dask extensively and ended up pairing with a Dask core contributor to get the pull request in a mergeable state.</p> <p>Actually creating pull requests is a great way to connect with developers at a deeper level. Developers typically appreciate they effort, even if they need to significantly refactor your code.</p> <p>Developer advocates can of course add a lot of value to project, even if they're not writing any code.</p>"},{"location":"devrel/devrel-driven-development/#devrel-cheerleading","title":"DevRel cheerleading","text":"<p>Dev advocates should strive to inject positivity to the project and guide the team to communicate in an upbeat manner. Everyone has their own communication style, but a little extra positive energy never hurts.</p> <p>Reacting with emojis to pull requests and issues is the lowest hanging fruit. If a developer fixes a bug, adds a feature, or raises a good issue, it's easy to react with a thumbs up. When you start adding positive emojis, other developers are likely to follow suit and do the same.</p> <p>You can also react with positive messages, like \"this is a great feature, thank you!\". You don't want to clutter inboxes with these types of messages, so use messages that generate notifications sparingly.</p> <p>Now lets turn our attention to the main dev advocacy value-add - driving usage and adoption.</p>"},{"location":"devrel/devrel-driven-development/#driving-usage-via-content","title":"Driving usage via content","text":"<p>A good dev advocate should help developers acquire new users and delight existing users.</p> <p>Dev advocates should be creating content to help onboard new users. Hopefully the engineers can easily see how the dev advocates are helping their project grow.</p> <p>Engineers are much more likely to support DevRel Driven Development if they feel like the developer advocates are adding value to the project. You can proactively share dev advocacy metrics (pageviews, button clicks, etc) with developers to help them quanity the value of your contributions to the project.</p>"},{"location":"devrel/devrel-driven-development/#conclusion","title":"Conclusion","text":"<p>DevRel Driven Development is a great way for developer advocates to forge strong connections with core library developers and end users and drive adoption of technologies. It's a more active type of advocacy that requires you to get your hands dirty instead of cheering on the sidelines.</p> <p>It's only practical for highly technical dev advocates that are developers themselves. Developer advocates with a purely marketing background won't be technical enough to suggest public interfaces or submit pull requests.</p> <p>It's best to use DevRel Driven Development in conjunction with engineering-lead feature prioritization. Engineers have plenty of features to build and technical debt to work on, independent of dev advocacy driven features. DevRel Driven Development is best layered on top of existing engineering workflows to encourage user-based focus and beautiful public interface design.</p> <p>Software engineers can fall into the trap of spending 99% of their time on programming and only 1% of their time on creating READMEs, documentation, and SEO-optimized content for end users. It's hard to get users if the onboarding materials and messaging are not on point. DevRel Driven Development encourages engineers to spend a bit more time to build an amazing user experience, which is a great way to get users to fall in love with their beautiful code.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/","title":"The Virtuous Content Cycle for Developer Advocates","text":"<p>This post explains how to scale developer advocacy by creating content in a way that answers current user questions and makes it easier to generate additional content in the future.</p> <p>Developer advocates help engineers leverage technologies to get their jobs done efficiently. Successful software projects grow exponentially, so the number of user questions also grows rapidly. The virtuous content cycle allows developer advocates to scale themselves and meet the needs of a quickly growing community.</p> <p>TL;DR:</p> <ul> <li>Answer user questions generically</li> <li>Create content that makes it easy for users to answer their own questions</li> <li>Answer questions with reusable content</li> <li>Use content to make other content (e.g. convert a successful blog post to a tech talk and a educational video)</li> <li>You will be able to handle more user questions by answering common queries in a scalable manner</li> </ul>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#start-by-answering-user-questions","title":"Start by answering user questions","text":"<p>The virtuous content cycle starts by answering user questions in generic, minimal, and reproducible manner. That'll make your answers easier to reuse by other developers.</p> <p>Question askers often intermingle business logic and unrelated details in their technical questions. They may talk about running code on a specific cloud for a question where the cloud isn't relevant for example.</p> <p>The developer advocate should simplify the user question and make it generic / minimal. You want to make easy for developers with related issues to grok the example.</p> <p>You should also publish a fully functional code snippet or notebook in the answer so interested parties can easily reproduce the example on their machines. Bonus points if the code snippet is checked into source control.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#preventatively-answer-new-questions","title":"Preventatively answer new questions","text":"<p>When new developers Google the same question in the future, you want to make it easy for them to find your answer. If they see your high quality response, chances are they'll be able to figure out the answer and won't have to ask again.</p> <p>Good content often prevents you from having to deal with repeat questions.</p> <p>Developer advocates should obsess over providing users with a wonderful experience for all commonly searched keywords related to their technology. Delighting existing users and proactively answering their questions helps developers love your tech!</p> <p>Your high quality responses will come in handy, even when developers re-ask the question.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#use-content-to-help-answer-questions","title":"Use content to help answer questions","text":"<p>Some users will inevitably re-ask questions that have already been answered in forums or in chat channels. It's possible they couldn't find your response via their Google search or they can't figure out how the generic answer relates to their particular question.</p> <p>You can help these users by sending them a link to the blog post and/or the notebook with the minimal code example. Leveraging existing content when answering questions is more efficient than starting from scratch every time.</p> <p>Sometimes you'll need to help the user connect the dots between their specific question and the generic response. You can help them simplify their question and that will usually show them the light.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#watch-out-for-the-chat-trap","title":"Watch out for the \"chat trap\"","text":"<p>The \"chat trap\" is when you answer questions in a chat application like Slack and don't reproduce that answer in a medium that'll be easily searchable by other developers in the future.</p> <p>You'll inevitably have to re-answer this question again in the future if your answer is in a chat application that's not indexed by search engines.</p> <p>In these situations it's better to generically answer the question in a blog post and send the user a link. You can occasionally answer user questions in chat applications, but should be wary because this isn't scalable.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#find-what-content-resonates-with-your-users","title":"Find what content resonates with your users","text":"<p>You want to continuously gauge how your content engages users. You'll want verbal queues from users that your responses help them get past their issue. You should get comments like \"thanks, that worked!\".</p> <p>You also want objective metrics that indicate your answers are helping. In Stackoverflow, you should check to make sure your answers are getting views and upvotes. For blog posts, you should check pageviews, time on page, and Google ranking for targeted keywords.</p> <p>Objective metrics let you periodically check in and make sure you're generating content with the highest return on investment for your developer community. It also lets you iterate and develop a communication style that's most engaging for your audience. Content with more upvotes and a longer time on page is more engaging.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#use-content-to-make-other-content","title":"Use content to make other content","text":"<p>Once you have a large body of content with performance metrics it's easy to repurpose it for other mediums.</p> <p>A blog post can easily be converted to a tech talk, a video, part of a course, or a section of a book. Some blog posts are best repurposed in a book chapter. Other blog posts can be easily adapted for an amazing talk at a programming conference.</p> <p>Once you have objective metrics indicating your content resonates with the target audience, you can be more confident that it'll also hit the mark when presented in another form. For example, suppose you have a blog post on a catchy subject with an average time on page of 7 minutes. This content is clearly engaging for your audience, so it's likely to make for a great tech talk as well.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#growing-traffic-an-inevitable-byproduct","title":"Growing traffic; an inevitable byproduct","text":"<p>When you're in the virtuous content cycle, all your metrics should get better each month. Your blog and video traffic should be growing every week. You should be able to handle more user questions without growing the team.</p> <p>Better metrics are a necessary side effect of scaling your developer advocacy efforts. The only way you can preventatively answer more user questions is by creating content that ranks well and gets more traffic. Remember that preventatively answering questions is helping a user to answer their own questions via Google searches, so they don't have to answer the question again in your chat channel.</p> <p>Traffic that grows month-over-month is a good indication you're in the virtuous content cycle.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#content-on-first-principles","title":"Content on first principles","text":"<p>A first principle is a fundamental building block. Content on first principles is the most easy to repurpose for user questions.</p> <p>Answering a user question and providing them with a few links on related first principles is a great way to teach them more about the underlying technology. When a user is trying to work through an error, they usually won't want to learn about unrelated first principles, but are willing to read a post on a related fundamental building block.</p> <p>Boiling down your tech into fundamental building block and using these first principle blog posts is a great way to enter the virtuous content cycle. Keyword research can help you identify the fundamental building blocks of your technology.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#keyword-research","title":"Keyword research","text":"<p>Keyword research is finding the search terms that users are entering into search engines related to your technology. Popular keywords are often first principle building blocks for the technology you're evangelising.</p> <p>You should prioritize your content based on the most popular keywords. This will allow you to help the greatest number of users.</p>"},{"location":"devrel/virtuous-content-cycle-developer-advocates/#thriving-with-a-virtuous-content-cycle","title":"Thriving with a virtuous content cycle","text":"<p>Developer advocates on successful software projects can easily become overwhelmed by the sheer volume of user questions.</p> <p>Answering user questions with reusable content is the best way to scale developer advocacy efforts. Tailoring responses for individual users isn't scalable or feasible at a certain point.</p> <p>Scaling your developer advocacy efforts with reusable content has a bunch of wonderful side effects:</p> <ul> <li>it gives you ideas on the best topics for tech talks</li> <li>it encourages keyword research and user empathy</li> <li>it forces you to boil down concepts into first principles</li> <li>it encourages you to create minimal, reproducible answers</li> </ul> <p>Once you're in the virtuous content cycle, your metrics will get better every month and you'll be able to keep up with all the user questions. The volume of questions should not grow excessively because many users will be answering their own questions.</p> <p>Your content will allow you to easily make other types of content, so you'll be able to evangelize the technology more extensively. Once you have all the baseline content created, you should have time to make more videos, give talks, and participate in meetups. For a passionate developer advocate, the virtuous content cycle is a wonderfully satisfying way to work.</p>"}]}